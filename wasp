#!/usr/bin/python3

import json
import argparse
import os
import subprocess


class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


class Manifest:
    def __init__(self, details: dict):
        self.details = details

    def generate(self):
        manifest = {
            "name": self.details['name'],
            "description": self.details['description'],
            "short_name": self.details['short_name'],
            "theme_color": self.details['theme_color'],
            "background_color": self.details['background_color'],
            "start_url": self.details['start_url'],
            "display": self.details['display'],
            "lang": self.details['lang'],
            "orientation": self.details['orientation'],
            "dir": self.details['dir']
        }
        if self.details['related_applications_check'].lower() == 'y':
            manifest["related_applications"] = self.details['related_applications']
            manifest["prefer_related_applications"] = self.details['prefer_related_applications']

        with open('manifest.json', 'w') as fp:
            json.dump(manifest, fp, sort_keys=True, indent=4, separators=(',', ': '))

    def set(self):
        self.short_name()
        self.theme_color()
        self.background_color()
        self.display()
        self.lang()
        self.dir()
        self.start_url()
        self.orientation()
        self.related_applications()
        return self

    def short_name(self):
        self.details['short_name'] = input(
            "Short Name " + str(on(["M"], args)) + " (" + Colors.OKBLUE + self.details['name'][
                                                                          0:12] + Colors.ENDC + "): ")
        if self.details['short_name'] == '':
            self.details['short_name'] = self.details['name'][0:12]

    def theme_color(self):
        # TODO: Default
        # TODO: Validation
        self.details['theme_color'] = input("Theme Color " + str(on(["M"], args)) + ": ")

    def background_color(self):
        # TODO: Default
        # TODO: Validation
        self.details['background_color'] = input("Background Color " + str(on(["M"], args)) + ": ")

    def start_url(self):
        # TODO: Default
        self.details['start_url'] = input("Starting URL " + str(on(["M"], args)) + ": ")

    def lang(self):
        # TODO: Default
        # TODO: Validation
        self.details['lang'] = input("Language " + str(on(["M"], args)) + ": ")

    def dir(self):
        # TODO: Default
        # TODO: Validation
        self.details['dir'] = input(
            "Text Direction " + str(on(["M"], args)) + " (" + Colors.OKBLUE + "auto" + Colors.ENDC + "): ")

    def related_applications(self):
        # TODO: Validation
        self.details['related_applications_check'] = input("Do you want to include related applications? " + str(
            on(["M"], args)) + " (y/" + Colors.OKBLUE + "n" + Colors.ENDC + "): ")
        if self.details['related_applications_check'].lower() == 'y' \
                or self.details['related_applications_check'].lower() == 'n':
            prefer_related_applications = input("Prefer Related Applications " + str(
                on(["M"], args)) + " (y/" + Colors.OKBLUE + "n" + Colors.ENDC + "): ")
            if prefer_related_applications.lower() == 'y':
                self.details['prefer_related_applications'] = True
            elif prefer_related_applications.lower() == 'n' or prefer_related_applications.lower() == '':
                self.details['prefer_related_applications'] = False
            self.details['related_applications'] = input("Related Applications " + str(on(["M"], args)) + ": ")
            if self.details['related_applications'] == "":
                self.details['related_applications'] = []
                # TODO: Build full prompts for related applications

    def display(self):
        self.details['display'] = input(
            "Display " + str(on(["M"], args)) + " (" + Colors.OKBLUE + "minimal-ui" + Colors.ENDC + "): ")
        if self.details['display'].lower() == "minimal-ui" \
                or self.details['display'].lower() == "browser" \
                or self.details['display'].lower() == "standalone" \
                or self.details['display'].lower() == "fullscreen":
            self.details['display'] = self.details['display'].lower()
        elif self.details['display'] == '':
            self.details['display'] = "minimal-ui"
        else:
            print("Please enter one of the options from https://developer.mozilla.org/en-US/docs/Web/Manifest#display")
            self.display()

    def orientation(self):
        self.details['orientation'] = input(
            "Display Orientation " + str(on(["M"], args)) + " (" + Colors.OKBLUE + "any" + Colors.ENDC + "): ")
        if self.details['orientation'].lower() == "any" \
                or self.details['orientation'].lower() == "natural" \
                or self.details['orientation'].lower() == "landscape" \
                or self.details['orientation'].lower() == "landscape-primary" \
                or self.details['orientation'].lower() == "landscape-secondary" \
                or self.details['orientation'].lower() == "portrait" \
                or self.details['orientation'].lower() == "portrait-primary" \
                or self.details['orientation'].lower() == "portrait-secondary":
            self.details['orientation'] = self.details['orientation'].lower()
        elif self.details['orientation'] == '':
            self.details['orientation'] = "any"
        else:
            print(
                "Please enter one of the options from https://developer.mozilla.org/en-US/docs/Web/Manifest#orientation")
            self.orientation()


def on(options, args):
    return_options = "["
    for i, s in enumerate(options):
        if s == "M" and args.manifest:
            return_options += Colors.OKGREEN + "M" + Colors.ENDC
        else:
            return_options += s

        if i < len(options) - 1:
            return_options += " "
    return return_options + "]"


def privacy():
    input_val = input("Privacy " + str(on([], args)) + " (" + Colors.OKBLUE + "private" + Colors.ENDC + "): ")
    if input_val.lower() == "public" or input_val.lower() == "private":
        return input_val.lower()
    elif input_val == "":
        return "private"
    else:
        print("Please enter \"public\" or \"private\"")
        privacy()


def authors():
    process = subprocess.Popen(["git", "config", "--get", "user.name"], stdout=subprocess.PIPE)
    author = (process.communicate()[0]).decode("utf-8").strip().split('\n')[0]

    author_val = input("Authors " + str(on([], args)) + " (" + Colors.OKBLUE + author + Colors.ENDC + "): ")
    if author_val == '':
        author_val = author
    return author_val


def name():
    name_val = input(
        "Project/Software Name " + str(on(["M"], args)) + " (" + Colors.OKBLUE + directory[0:45] + Colors.ENDC + "): ")
    if name_val == '':
        name_val = directory[0:45]
    return name_val


try:
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('task', metavar='task', type=str, help='A task to perform. Options : init, update, tag')
    parser.add_argument('-m', '--manifest', action='store_true', help='Generate a manifest.json for your project')

    args = parser.parse_args()

    directory = os.path.basename(os.getcwd())

    if args.task == 'init':
        details = {}

        print("Thanks for using Wasp!\n")

        details['name'] = name()
        details['description'] = input("Description " + str(on(["M"], args)) + ": ")
        details['keywords'] = input("Keywords " + str(on([], args)) + ": ")
        details['authors'] = authors()
        details['licence'] = input("Licence " + str(on([], args)) + ": ")
        details['website'] = input("Website " + str(on([], args)) + ": ")
        details['privacy'] = privacy()

        if args.manifest:
            print("\nNow let's collect some Manifest Information\n")
            Manifest(details).set().generate()
        with open('.wasp.json', 'w') as fp:
            json.dump(details, fp, sort_keys=True, indent=4, separators=(',', ': '))

except (KeyboardInterrupt, SystemExit):
    exit(1)
