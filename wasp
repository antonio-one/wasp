#!/usr/bin/python3

import json
import argparse
import os
import subprocess


class Manifest:
    def __init__(self, details: dict):
        self.details = details

    def generate(self):
        manifest = {
            "name": self.details['name'],
            "short_name": self.details['short_name'],
            "theme_color": self.details['theme_color'],
            "background_color": self.details['background_color'],
            "start_url": self.details['start_url'],
            "display": self.details['display'],
            "lang": self.details['lang'],
            "orientation": self.details['orientation'],
        }

        with open('manifest.json', 'w') as fp:
            json.dump(manifest, fp, sort_keys=True, indent=4, separators=(',', ': '))

    def set(self):
        self.short_name()
        self.theme_color()
        self.background_color()
        self.display()
        self.start_url()
        self.lang()
        self.orientation()

    def short_name(self):
        self.details['short_name'] = input("Short Name (" + self.details['name'][0:12] + "): ")
        if self.details['short_name'] == '':
            self.details['short_name'] = self.details['name'][0:12]

    def theme_color(self):
        # TODO: Default
        # TODO: Validation
        self.details['theme_color'] = input("Theme Color: ")

    def background_color(self):
        # TODO: Default
        # TODO: Validation
        self.details['background_color'] = input("Background Color: ")

    def start_url(self):
        # TODO: Default
        self.details['start_url'] = input("Starting URL: ")

    def lang(self):
        # TODO: Default
        # TODO: Validation
        self.details['lang'] = input("Language: ")

    def display(self):
        self.details['display'] = input("Display (minimal-ui): ")
        if self.details['display'].lower() == "minimal-ui" \
                or self.details['display'].lower() == "browser" \
                or self.details['display'].lower() == "standalone" \
                or self.details['display'].lower() == "fullscreen":
            self.details['display'] = self.details['display'].lower()
        elif self.details['orientation'] == '':
            self.details['orientation'] = "minimal-ui"
        else:
            print("Please enter one of the options from https://developer.mozilla.org/en-US/docs/Web/Manifest#display")
            self.display()

    def orientation(self):
        self.details['orientation'] = input("Display Orientation (any): ")
        if self.details['orientation'].lower() == "any" \
                or self.details['orientation'].lower() == "natural" \
                or self.details['orientation'].lower() == "landscape" \
                or self.details['orientation'].lower() == "landscape-primary" \
                or self.details['orientation'].lower() == "landscape-secondary" \
                or self.details['orientation'].lower() == "portrait" \
                or self.details['orientation'].lower() == "portrait-primary" \
                or self.details['orientation'].lower() == "portrait-secondary":
            self.details['orientation'] = self.details['orientation'].lower()
        elif self.details['orientation'] == '':
            self.details['orientation'] = "any"
        else:
            print(
                "Please enter one of the options from https://developer.mozilla.org/en-US/docs/Web/Manifest#orientation")
            self.orientation()


def privacy():
    input_val = input("Privacy (private): ")
    if input_val.lower() == "public" or input_val.lower() == "private":
        return input_val.lower()
    elif input_val == "":
        return "private"
    else:
        print("Please enter \"public\" or \"private\"")
        privacy()


try:
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('task', metavar='task', type=str, help='A task to perform. Options : init, update, tag')
    parser.add_argument('-m', '--manifest', action='store_true', help='Generate a manifest.json for your project')

    args = parser.parse_args()
    print(args)

    directory = os.path.basename(os.path.dirname(os.path.realpath(__file__)))

    process = subprocess.Popen(["git", "config", "--get", "user.name"], stdout=subprocess.PIPE)
    author = (process.communicate()[0]).decode("utf-8").strip().split('\n')[0]

    if args.task == 'init':
        details = {}

        print("Thanks for using Wasp!\n")

        details['name'] = input("Project/Software Name (" + directory[0:45] + "): ")
        if details['name'] == '':
            details['name'] = directory[0:45]
        details['description'] = input("Description: ")
        details['keywords'] = input("Keywords: ")
        details['authors'] = input("Authors (" + author + "): ")
        if details['authors'] == '':
            details['authors'] = author
        details['licence'] = input("Licence: ")
        details['website'] = input("Website: ")
        details['privacy'] = privacy()

        if args.manifest:
            print("\nNow let's collect some Manifest Information\n")
            Manifest(details).set()

        with open('.wasp.json', 'w') as fp:
            json.dump(details, fp, sort_keys=True, indent=4, separators=(',', ': '))

except (KeyboardInterrupt, SystemExit):
    exit(1)
